version: '3.8'

services:
  vendure:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - APP_ENV=production
      - PORT=3000
      - COOKIE_SECRET=${COOKIE_SECRET}
      - SUPERADMIN_USERNAME=${SUPERADMIN_USERNAME}
      - SUPERADMIN_PASSWORD=${SUPERADMIN_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_SSL=${DB_SSL}
      - ASSET_URL_PREFIX=${ASSET_URL_PREFIX}
    volumes:
      # Mount volumes for persistent data
      - assets_data:/usr/src/app/static/assets
      - email_data:/usr/src/app/static/email/test-emails
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3000, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    networks:
      - vendure-network

  # Optional: Redis for better job queue performance
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - vendure-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  assets_data:
    driver: local
  email_data:
    driver: local
  redis_data:
    driver: local

networks:
  vendure-network:
    driver: bridge
